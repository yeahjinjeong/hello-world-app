name: Docker Image CI # 이름 마음대로 써도 된다

on:
  push: # 마스터 브랜치에 푸시가 일어날 때
    branches: [ "master" ]
  pull_request: # 마스트 브랜치에 풀리퀘가 일어날 때
    branches: [ "master" ]

jobs:
  # 1. CI - 통합(build) 
  build:
    runs-on: ubuntu-latest # build.gradle, docker build 할 머신이 필요하다; 동적으로 만들어주기
    steps:
    # 1-1. 저장소의 커밋된 master브랜치 내려받기 (클론)
    - name : Checkout
      uses: actions/checkout@v3
      with:
        ref: master
    # 1-2. JDK 17 설치 (원하는 버젼 및 배포판 (corretto | zulu | temurin 지정)
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    # 1-3. Gradle 실행 권한 부여
    - name: Grant permission for gradlew
      run: chmod +x ./gradlew
    # 1-4. Gradle Build (테스트 생략)
    - name: Build with Gradle
      run: ./gradlew clean build -x test
    # 1-5. 빌드된 jar파일을 도커 이미지로 빌드 및 도커 허브에 발행(푸시)
    - name: Docker build and publish
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}

  # 2. CD 배포
  deploy:
    # needs를 통해 build job이 수행성공시에만 작업하도록 설정
    needs: build
    runs-on: ubuntu-latest

    steps:
    # NCP SSH 접속 / docker image pull & run
    - name: NCP SSH Login and Docker Image pull and run
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.NCP_HOST }}
        username: ${{ secrets.NCP_USERNAME }}
        password: ${{ secrets.NCP_PASSWORD }}
        key: ${{ secrets.NCP_KEY }}
        port: ${{ secrets.NCP_PORT }}
        script: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker stop $(sudo docker ps -a -q) # 기존에 돌고 있던 프로세스 식별자로 멈추기
          sudo docker rm -f $(sudo docker ps -a -q)
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}
          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}
          sudo docker image prune -f
